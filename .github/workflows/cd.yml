name: Continuous Deployment

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-22.04
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update config
        shell: bash
        run: sed -E -i "s/\s+\#\s(.*)\s\#\sreplace issue numbers/\\t\1/g" config/cliff.toml
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v2
        id: git-cliff
        with:
          config: config/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

  publish-binaries:
    name: Publish binaries
    needs: generate-changelog
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - {
              NAME: linux-x64-glibc,
              OS: ubuntu-22.04,
              TOOLCHAIN: stable,
              TARGET: x86_64-unknown-linux-gnu,
              NPM_PUBLISH: true,
              PYPI_PUBLISH: true,
            }

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set the release version
        shell: bash
        run: echo "RELEASE_VERSION=${GITHUB_REF:11}" >> $GITHUB_ENV
      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ matrix.build.NAME }}" = *"-musl" ]]; then
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              --allow-unauthenticated musl-tools
          fi
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.build.TOOLCHAIN }}
          targets: ${{ matrix.build.TARGET }}
      - name: Build (linux/macos)
        if: matrix.build.OS != 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --locked --target ${{ matrix.build.TARGET }}
      - name: Build (windows)
        if: matrix.build.OS == 'windows-2022'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --no-default-features --release --locked --target ${{ matrix.build.TARGET }}
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release/{man,completions}
          cp {LICENSE,README.md,CHANGELOG.md} release/
          OUT_DIR=release/completions/ cargo run --release --bin git-cliff-completions
          OUT_DIR=release/man/ cargo run --release --bin git-cliff-mangen
          for bin in 'git-cliff' 'git-cliff-completions' 'git-cliff-mangen'; do
            if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
              bin="${bin}.exe"
            fi
            cp "target/${{ matrix.build.TARGET }}/release/${bin}" release/
          done
          mv release/ git-cliff-${{ env.RELEASE_VERSION }}/
      - name: Create release artifacts
        shell: bash
        run: |
          if [ "${{ matrix.build.OS }}" = "windows-2022" ]; then
            7z a -tzip "git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.zip" \
              git-cliff-${{ env.RELEASE_VERSION }}/
          else
            tar -czvf git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              git-cliff-${{ env.RELEASE_VERSION }}/
            shasum -a 512 git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz \
              > git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}.tar.gz.sha512
          fi
      - name: Publish to GitHub
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: git-cliff-${{ env.RELEASE_VERSION }}-${{ matrix.build.TARGET }}*
          file_glob: true
          overwrite: true
          tag: ${{ github.ref }}
          release_name: "Release v${{ env.RELEASE_VERSION }}"
          body: "${{ needs.generate-changelog.outputs.release_body }}"
      - name: Build Python wheels (linux)
        if: matrix.build.PYPI_PUBLISH == true && startsWith(matrix.build.NAME, 'linux')
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ../pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --manifest-path ../git-cliff/Cargo.toml --sdist --out dist
          sccache: 'true'
          manylinux: auto
      - name: Build Python wheels (macos & windows)
        if: |
          matrix.build.PYPI_PUBLISH == true &&
          (startsWith(matrix.build.OS, 'macos') || startsWith(matrix.build.OS, 'windows'))
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ../pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --sdist --manifest-path ../git-cliff/Cargo.toml --out dist
          sccache: 'true'
      - name: Build Python wheels (musl)
        if: matrix.build.PYPI_PUBLISH == true && endsWith(matrix.build.OS, 'musl')
        uses: PyO3/maturin-action@v1
        with:
          working-directory: ../pypi
          target: ${{ matrix.build.TARGET }}
          args: --release --sdist --out dist
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload Python wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: pypi/dist

  publish-pypi:
    name: Publish PyPI package
    runs-on: ubuntu-22.04
    needs: publish-binaries
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ vars.USE_TESTPYPI == 'true' && secrets.TESTPYPI_API_TOKEN || secrets.PYPI_API_TOKEN }}
          MATURIN_REPOSITORY: ${{ vars.USE_TESTPYPI == 'true' && 'testpypi' || 'pypi' }}
        with:
          working-directory: ../pypi
          command: upload
          args: --skip-existing *
